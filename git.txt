git init

.gitignore
*.a			#확장자가 .a인 파일 무시
!lib.a		#lib.a파일 빼고 무시
/filename	#현재 디렉토리의 filename ****파일만!!!!!!!!!**** 무시
dir/		#dir 디렉토리는 전부 무시
dir/*.a		#dir 디렉토리의 .a ****파일만!!!!!!!!**** 무시
dir/**/*.a	#dir 디렉토리 아래의 모든 .a 파일을 무시





설정(--global 옵션은 모든 저장소에 적용)
git config [--global] user.name "name"
git config [--global] user.email "email"
git config --list				: 설정보기





git clone "url"
git add "파일명"
git status
git diff	: 워킹 디렉터리 파일들과 (마지막 커밋 파일 || add한 경우 staging area 파일을 비교)
git rm		: git으로부터 더이상 추적 안하고, 워킹디렉터리와 staging area에서도 파일 완전 삭제
git mv		: 파일명 변경 후 저장소에 반영
(git rm과 git mv는 커밋해야 저장소에 반영된다.)







git commit		: 커밋
-m "커밋메시지"		: 커밋메시지 바로 설정
--amend			: 마지막 커밋 덮어쓰기






git branch			: 브랜치 조회
-r					: 원격 브랜치 목록 조회
-a					: 로컬 브랜치 목록 조회
-d "브랜치이름"		: 브랜치 삭제


git checkout "브랜치이름"							: 브랜치 이동
git checkout -t "원격브랜치이름"					: 원격 저장소의 브랜치 가져와서 이동
git checkout -b "생성할브랜치이름" "원격브랜치이름"	: 원격저장소의 브랜치를 가져와서 원하는 이름 설정
git checkout "브랜치이름or커밋체크섬" "파일명"		: 워킹 디렉토리 파일을 해당 버전으로 변경







git log
-숫자					: 최근 숫자 개의 커밋만 조회
--since="날짜명시", --after="날짜명시"	: 명시한 날짜 이후의 커밋만 검색 --since=2.weeks 와 같이 사용
--until="날짜명시", --before="날짜명시"	: 명시한 날짜 이전의 커밋만 검색 --until=2.weeks 와 같이 사용
-p						: diff결과도 출력
--stat					: 통계정보
--pretty=oneline		: 한줄 요약
--graph					: 브랜치와 머지 히스토리 그림 출력







리모트 저장소
git remote									: 리모트 저장소 출력
git remote add "저장소이름" "url"			: 리모트 저장소 추가 (단, clone과 달리 커밋 내용들은 안가져옴 !!!)
git remote rename "원래이름" "바꿀이름"		: 리모트 저장소 이름변경
git remote remove "저장소이름"				: 리모트 저장소 삭제


#push는 저장소가 수정됐다면 fetch 한 후 merge해야 push할 수 있음, 아님 강제로 push
git push "저장소이름" "브랜치이름"	: 브랜치를 리모트 저장소에 push
--force, -f							: 리모트 저장소에 강제로 덮어쓰기


git fetch "저장소이름" "브랜치이름"	: 리모트 저장소에 수정이 있는 경우 다시 데이터 가져오기
(단, 수정이 있었을 경우 fetch 후 브랜치는 트래킹 브랜치!!),
(따라서 "저장소이름"/"브랜치이름"  이렇게 접근해서 머지해야 함!!)






git reset "커밋정보" ["파일명"]	: 파일명도 쓸 경우엔 해당 파일에만 적용 (이때 --soft는 사용불가)
--soft				: HEAD만 해당 커밋으로 이동, 여기서 커밋하면 커밋 덮어쓰기 할 수 있음
--mixed				: index(staging area)의 파일들도 해당 커밋으로 변경
--hard				: 워킹 디렉토리도 해당 커밋으로 변경
